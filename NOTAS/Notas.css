body{
    background-color: black;
}
section{
    margin: 10px 10px;
    background-color: rgb(39, 40, 46);
    display: block;
    padding: 50px 25px; 
    border-radius: 5px;
    position: relative;
}

div{
    margin: 50px 0;
    width: 150px;
    height:150px;
    background: rgb(34, 73, 65);
    border-radius: 2px;
    
    
    }
fieldset{
    border-radius: 5px;
    display: flex;
    justify-content: center;
}
div:hover{
    /*OUTLINE es una propiedad acortada [Shorthand],
      3 valores: TAMAÑO DEL BORDE, TIPO Y COLOR.
      Sirve para crear un borde sin afectar a las demas
      cajas*/
    outline: 4px solid rgb(19, 248, 160); 
    transition: .2s;
    z-index: 100;
}
    /* POSITION:
                STATIC (valor por defecto)
                RELATIVE (espacios reservados)
                ABSOLUTE (desaparece el  espacio reservado. la caja se ajusta al tamaño del contenido si no le definimos H y Width)
                FIXED (dejamos un objeto fijo y se sobrepone sobre los demas objetos)
                STYCKY (se comporta como un relative y se tranforma en fixed cuando llegamos al objeto)

 (propiedad que permite posicionar un objeto, al posicionar un objeto se desbloquean nuevas funciones, como TOP, LEFT, RIGHT,BUTTOM, Z-INDEX) */
h1{
     position:absolute;
     color: aliceblue;
     top: 0;
    
 }
 p{
     opacity: .05;
 }

 .position-example{
    position: relative;    
    
 }

 .position-boxs div{
    box-shadow: 5px -5px 10px 1.5px rgba(0, 0, 0, 0.2)
 }
 .position-boxs div:hover{
    transform: scale(1.40);
 }
 .position-boxs div:hover>p{
    opacity: .5;
    transition: .6s;
 }

.caja5{
    background-color: rgb(88, 34, 34);
    position:relative;
    top: 30px; /* Se corre 30px desde arriba*/
    left: 30px;
}
.caja6{
    background-color: rgb(139, 86, 131);
    position:absolute;
    top:0;
}
.caja7{
    
    background-color: rgb(79, 126, 179);
    position: relative;
    top: -30px; 
    left: -30px;
}
.caja8{
    background-color: rgb(145, 134, 40);
    position: absolute;  
    top:0;                    
    left: 0;                       
    bottom: 0;                   
    right: 0;               
    margin: auto;
}
        /*DISPLAY: 
                (Modifica el comportamiento de las cajas)
                BLOCK: ocupa todo el ancho del VP. por ende se pone una arriba de la otra (propiedad por defecto)
                INLINE: se ponen el linea poro no se puede modificar(generalmente para textos)
                INLINE-BLOCK: bloques en linea, y permite modificar el ancho
                FLEX:
                GRID:  */

.display-boxs div{
    width: 200px;
    height: 200px;
}
.caja9 b{
    background-color: rgb(145, 134, 40);
    display:inline;
    width: 50px; /* No se puede modificar esta propiedad con display:inline*/      
}
.caja10 b{
    background-color: rgb(145, 134, 40);
    display:inline-block;
    width: 50px;
    height: 50px;
}
.caja11 b{
    background-color: rgb(145, 134, 40);
    display:block;
    width: 50px;
    height: 50px;
}
   /*OVERFLOW: [Shorthand->(overflow-X | overflow-Y)]
             (Cuando el contenido sobresale de una caja)
            AUTO: Detecta si es necesario poner un scroll
            HIDDEN: Todo el contenido que sobresale de la caja se lo oculta
            SCROLL: Crea un scroll si o si*/
.text-overflow{
    opacity: 1;
}
.caja12{
    width: 250px;
    height: 270px;
    overflow: auto;
}

.caja13{
    width: 250px;
    height: 270px;    
    overflow: hidden;
}                
.logo-css{
width: 150px;
position: relative;
top: 130px; 
left: 100px;    
}
.caja13:hover>img{
    top: 15px;
    left: 0;
    transition: 1.3s;
}

/* PSEUDOELEMENTOS: (No forman parte del D.O.M.)
                  ::first-line | block
                  ::first-letter | block
                  ::placeholder -> (para inputs)
                  ::selection -> texto que se selecciona cuando hacemos click y arrastramos
                 _____________________________
                  ::after  |  Hijos- content (necesario)-inline:
                           tag::before { content:"hola"}

                  ::before  | hijos -content(necesario)-inline

                             tag::after { content:"como estas?"}
                
                entonces quedaria "hola TAG como estas?*/

/*PSEUDOCLASES:
            :HOVER ->Cuando pasamos mouse por arriba de la etiqueta, se usa mucho la propiedad TRANSITION:"VALORs" para generrar una animacion progresiva
            :LINK -> podemos editar las propiedades de los enlaces, [<a href="#"]
            :VISITED ->como se debe comportar el enlace cuando fue visitado
            :ACTIVE -> Cuando hacemos click en la etiqueta
            :FOCUS ->una vez que hicimos click y tenemos seleccionado el elemento, generalmente se usa para los inputs
            :LANG ->idioma [tag:lang(es)], podemos darle propiedades a una tag dependiendo del idioma en la que se encuentra. anteriormente en html debemos definir en lang dentro de la etiqueta.*/


/* OBJET-FIT:
             Fill->la img adopta la resolucion del contenedor(un asco)
             CONTAIN-> se ajusta al centro del contenedor conservando la resolucion          
             COVER-> se ajusta al la resolucion de contenedor recortando la img  
             NONE->pone las resoluciones originales de la img y recorta lo que se excede del contenedor
             SCALE-DOWN-> se queda con la porpiedad(none o contain) que tenga la resolucion mas chica.

     OBJET-POSITION:
                  left-right-top-button
                  px-em-%-etc.
*/
.objfit-example div{
    display: inline-block;
    width: 300px;
    height: 300px;
}

.img-lambo1{
    width: 100%;
    height: 100%;
    object-fit: contain;
   
}

.img-lambo2{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: left;
   
}

.img-lambo3{
    width: 100%;
    height: 100%;
    object-fit: none;
   
}
    .img-lambo2:active{
         
        object-position: right;
        transition: object-position 2s;
        }
    
    

